// Copyright (C) Codeplay Software Limited
//
// Licensed under the Apache License, Version 2.0 (the "License") with LLVM
// Exceptions; you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://github.com/codeplaysoftware/oneapi-construction-kit/blob/main/LICENSE.txt
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
// License for the specific language governing permissions and limitations
// under the License.
//
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
// WARNING: This file is generated by a script, do not edit it directly. Instead
// changes should be made to the generate_header_30.sh script in
// builtins/scripts.

#if __OPENCL_C_VERSION__ >= 200
size_t __CL_WORK_ITEM_ATTRIBUTES get_global_linear_id(void);
size_t __CL_WORK_ITEM_ATTRIBUTES get_local_linear_id(void);
size_t __CL_WORK_ITEM_ATTRIBUTES get_enqueued_local_size(uint dimidx);
char __CL_CONST_ATTRIBUTES ctz(char x);
char2 __CL_CONST_ATTRIBUTES ctz(char2 x);
char3 __CL_CONST_ATTRIBUTES ctz(char3 x);
char4 __CL_CONST_ATTRIBUTES ctz(char4 x);
char8 __CL_CONST_ATTRIBUTES ctz(char8 x);
char16 __CL_CONST_ATTRIBUTES ctz(char16 x);
short __CL_CONST_ATTRIBUTES ctz(short x);
short2 __CL_CONST_ATTRIBUTES ctz(short2 x);
short3 __CL_CONST_ATTRIBUTES ctz(short3 x);
short4 __CL_CONST_ATTRIBUTES ctz(short4 x);
short8 __CL_CONST_ATTRIBUTES ctz(short8 x);
short16 __CL_CONST_ATTRIBUTES ctz(short16 x);
int __CL_CONST_ATTRIBUTES ctz(int x);
int2 __CL_CONST_ATTRIBUTES ctz(int2 x);
int3 __CL_CONST_ATTRIBUTES ctz(int3 x);
int4 __CL_CONST_ATTRIBUTES ctz(int4 x);
int8 __CL_CONST_ATTRIBUTES ctz(int8 x);
int16 __CL_CONST_ATTRIBUTES ctz(int16 x);
long __CL_CONST_ATTRIBUTES ctz(long x);
long2 __CL_CONST_ATTRIBUTES ctz(long2 x);
long3 __CL_CONST_ATTRIBUTES ctz(long3 x);
long4 __CL_CONST_ATTRIBUTES ctz(long4 x);
long8 __CL_CONST_ATTRIBUTES ctz(long8 x);
long16 __CL_CONST_ATTRIBUTES ctz(long16 x);
uchar __CL_CONST_ATTRIBUTES ctz(uchar x);
uchar2 __CL_CONST_ATTRIBUTES ctz(uchar2 x);
uchar3 __CL_CONST_ATTRIBUTES ctz(uchar3 x);
uchar4 __CL_CONST_ATTRIBUTES ctz(uchar4 x);
uchar8 __CL_CONST_ATTRIBUTES ctz(uchar8 x);
uchar16 __CL_CONST_ATTRIBUTES ctz(uchar16 x);
ushort __CL_CONST_ATTRIBUTES ctz(ushort x);
ushort2 __CL_CONST_ATTRIBUTES ctz(ushort2 x);
ushort3 __CL_CONST_ATTRIBUTES ctz(ushort3 x);
ushort4 __CL_CONST_ATTRIBUTES ctz(ushort4 x);
ushort8 __CL_CONST_ATTRIBUTES ctz(ushort8 x);
ushort16 __CL_CONST_ATTRIBUTES ctz(ushort16 x);
uint __CL_CONST_ATTRIBUTES ctz(uint x);
uint2 __CL_CONST_ATTRIBUTES ctz(uint2 x);
uint3 __CL_CONST_ATTRIBUTES ctz(uint3 x);
uint4 __CL_CONST_ATTRIBUTES ctz(uint4 x);
uint8 __CL_CONST_ATTRIBUTES ctz(uint8 x);
uint16 __CL_CONST_ATTRIBUTES ctz(uint16 x);
ulong __CL_CONST_ATTRIBUTES ctz(ulong x);
ulong2 __CL_CONST_ATTRIBUTES ctz(ulong2 x);
ulong3 __CL_CONST_ATTRIBUTES ctz(ulong3 x);
ulong4 __CL_CONST_ATTRIBUTES ctz(ulong4 x);
ulong8 __CL_CONST_ATTRIBUTES ctz(ulong8 x);
ulong16 __CL_CONST_ATTRIBUTES ctz(ulong16 x);
#endif
#ifdef __OPENCL_VERSION__
#undef __OPENCL_VERSION__
#endif
#define __OPENCL_VERSION__ 300
#if __OPENCL_C_VERSION__ >= 300
#define NULL 0
typedef enum {
  memory_order_relaxed,
  memory_order_acquire,
  memory_order_release,
  memory_order_acq_rel
} memory_order;
typedef uint memory_scope;
#define memory_scope_work_item 1u
#define memory_scope_sub_group 2u
#define memory_scope_work_group 3u
#define memory_scope_device 4u
#define memory_scope_all_svm_devices 5u
#define memory_scope_all_devices 6u

void __CL_BARRIER_ATTRIBUTES work_group_barrier(cl_mem_fence_flags flags);
void __CL_BARRIER_ATTRIBUTES work_group_barrier(cl_mem_fence_flags flags,
                                                memory_scope scope);

void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __local atomic_int *obj,
                                         int value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __local atomic_long *obj,
                                         long value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __local atomic_uint *obj,
                                         uint value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __local atomic_ulong *obj,
                                         ulong value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __local atomic_float *obj,
                                         float value);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __local atomic_double *obj,
                                         double value);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __global atomic_int *obj,
                                         int value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __global atomic_long *obj,
                                         long value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __global atomic_uint *obj,
                                         uint value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __global atomic_ulong *obj,
                                         ulong value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __global atomic_float *obj,
                                         float value);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile __global atomic_double *obj,
                                         double value);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile atomic_int *obj, int value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile atomic_long *obj, long value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile atomic_uint *obj, uint value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile atomic_ulong *obj,
                                         ulong value);
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile atomic_float *obj,
                                         float value);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES atomic_init(volatile atomic_double *obj,
                                         double value);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES atomic_work_item_fence(cl_mem_fence_flags flags,
                                                    memory_order order,
                                                    memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile __local atomic_int *object,
                                          int desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __local atomic_int *object, int desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __local atomic_int *object, int desired,
                      memory_order order, memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile __local atomic_long *object,
                                          long desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __local atomic_long *object, long desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __local atomic_long *object, long desired,
                      memory_order order, memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile __local atomic_uint *object,
                                          uint desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __local atomic_uint *object, uint desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __local atomic_uint *object, uint desired,
                      memory_order order, memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile __local atomic_ulong *object,
                                          ulong desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __local atomic_ulong *object, ulong desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __local atomic_ulong *object, ulong desired,
                      memory_order order, memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile __local atomic_float *object,
                                          float desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __local atomic_float *object, float desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __local atomic_float *object, float desired,
                      memory_order order, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES
atomic_store(volatile __local atomic_double *object, double desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __local atomic_double *object, double desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __local atomic_double *object, double desired,
                      memory_order order, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile __global atomic_int *object,
                                          int desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __global atomic_int *object, int desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __global atomic_int *object, int desired,
                      memory_order order, memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile __global atomic_long *object,
                                          long desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __global atomic_long *object, long desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __global atomic_long *object, long desired,
                      memory_order order, memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile __global atomic_uint *object,
                                          uint desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __global atomic_uint *object, uint desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __global atomic_uint *object, uint desired,
                      memory_order order, memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES
atomic_store(volatile __global atomic_ulong *object, ulong desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __global atomic_ulong *object, ulong desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __global atomic_ulong *object, ulong desired,
                      memory_order order, memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES
atomic_store(volatile __global atomic_float *object, float desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile __global atomic_float *object, float desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __global atomic_float *object, float desired,
                      memory_order order, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES
atomic_store(volatile __global atomic_double *object, double desired);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __global atomic_double *object, double desired,
                      memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile __global atomic_double *object, double desired,
                      memory_order order, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile atomic_int *object,
                                          int desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(volatile atomic_int *object,
                                                   int desired,
                                                   memory_order order);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(volatile atomic_int *object,
                                                   int desired,
                                                   memory_order order,
                                                   memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile atomic_long *object,
                                          long desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(volatile atomic_long *object,
                                                   long desired,
                                                   memory_order order);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(volatile atomic_long *object,
                                                   long desired,
                                                   memory_order order,
                                                   memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile atomic_uint *object,
                                          uint desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(volatile atomic_uint *object,
                                                   uint desired,
                                                   memory_order order);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(volatile atomic_uint *object,
                                                   uint desired,
                                                   memory_order order,
                                                   memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile atomic_ulong *object,
                                          ulong desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile atomic_ulong *object, ulong desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile atomic_ulong *object, ulong desired,
                      memory_order order, memory_scope scope);
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile atomic_float *object,
                                          float desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile atomic_float *object, float desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile atomic_float *object, float desired,
                      memory_order order, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES atomic_store(volatile atomic_double *object,
                                          double desired);
void __CL_BUILTIN_ATTRIBUTES atomic_store_explicit(
    volatile atomic_double *object, double desired, memory_order order);
void __CL_BUILTIN_ATTRIBUTES
atomic_store_explicit(volatile atomic_double *object, double desired,
                      memory_order order, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_BUILTIN_ATTRIBUTES atomic_load(volatile __local atomic_int *object);
int __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_int *object, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_int *object, memory_order order,
                     memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_load(volatile __local atomic_long *object);
long __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_long *object, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_long *object, memory_order order,
                     memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_load(volatile __local atomic_uint *object);
uint __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_uint *object, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_uint *object, memory_order order,
                     memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_load(volatile __local atomic_ulong *object);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_ulong *object, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_ulong *object, memory_order order,
                     memory_scope scope);
float __CL_BUILTIN_ATTRIBUTES
atomic_load(volatile __local atomic_float *object);
float __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_float *object, memory_order order);
float __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_float *object, memory_order order,
                     memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BUILTIN_ATTRIBUTES
atomic_load(volatile __local atomic_double *object);
double __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(
    volatile __local atomic_double *object, memory_order order);
double __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __local atomic_double *object, memory_order order,
                     memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_BUILTIN_ATTRIBUTES atomic_load(volatile __global atomic_int *object);
int __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __global atomic_int *object, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __global atomic_int *object, memory_order order,
                     memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_load(volatile __global atomic_long *object);
long __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __global atomic_long *object, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __global atomic_long *object, memory_order order,
                     memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_load(volatile __global atomic_uint *object);
uint __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __global atomic_uint *object, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __global atomic_uint *object, memory_order order,
                     memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_load(volatile __global atomic_ulong *object);
ulong __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(
    volatile __global atomic_ulong *object, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __global atomic_ulong *object, memory_order order,
                     memory_scope scope);
float __CL_BUILTIN_ATTRIBUTES
atomic_load(volatile __global atomic_float *object);
float __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(
    volatile __global atomic_float *object, memory_order order);
float __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __global atomic_float *object, memory_order order,
                     memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BUILTIN_ATTRIBUTES
atomic_load(volatile __global atomic_double *object);
double __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(
    volatile __global atomic_double *object, memory_order order);
double __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile __global atomic_double *object,
                     memory_order order, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_BUILTIN_ATTRIBUTES atomic_load(volatile atomic_int *object);
int __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(volatile atomic_int *object,
                                                 memory_order order);
int __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(volatile atomic_int *object,
                                                 memory_order order,
                                                 memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_load(volatile atomic_long *object);
long __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(volatile atomic_long *object,
                                                  memory_order order);
long __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(volatile atomic_long *object,
                                                  memory_order order,
                                                  memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_load(volatile atomic_uint *object);
uint __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(volatile atomic_uint *object,
                                                  memory_order order);
uint __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(volatile atomic_uint *object,
                                                  memory_order order,
                                                  memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES atomic_load(volatile atomic_ulong *object);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile atomic_ulong *object, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(
    volatile atomic_ulong *object, memory_order order, memory_scope scope);
float __CL_BUILTIN_ATTRIBUTES atomic_load(volatile atomic_float *object);
float __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile atomic_float *object, memory_order order);
float __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(
    volatile atomic_float *object, memory_order order, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BUILTIN_ATTRIBUTES atomic_load(volatile atomic_double *object);
double __CL_BUILTIN_ATTRIBUTES
atomic_load_explicit(volatile atomic_double *object, memory_order order);
double __CL_BUILTIN_ATTRIBUTES atomic_load_explicit(
    volatile atomic_double *object, memory_order order, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_BUILTIN_ATTRIBUTES atomic_exchange(volatile __local atomic_int *object,
                                            int desired);
int __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __local atomic_int *object, int desired, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __local atomic_int *object, int desired,
                         memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __local atomic_long *object, long desired);
long __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __local atomic_long *object, long desired, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __local atomic_long *object, long desired,
                         memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __local atomic_uint *object, uint desired);
uint __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __local atomic_uint *object, uint desired, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __local atomic_uint *object, uint desired,
                         memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __local atomic_ulong *object, ulong desired);
ulong __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __local atomic_ulong *object, ulong desired, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __local atomic_ulong *object, ulong desired,
                         memory_order order, memory_scope scope);
float __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __local atomic_float *object, float desired);
float __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __local atomic_float *object, float desired, memory_order order);
float __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __local atomic_float *object, float desired,
                         memory_order order, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __local atomic_double *object, double desired);
double __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __local atomic_double *object, double desired, memory_order order);
double __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __local atomic_double *object, double desired,
                         memory_order order, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __global atomic_int *object, int desired);
int __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __global atomic_int *object, int desired, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __global atomic_int *object, int desired,
                         memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __global atomic_long *object, long desired);
long __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __global atomic_long *object, long desired, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __global atomic_long *object, long desired,
                         memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __global atomic_uint *object, uint desired);
uint __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __global atomic_uint *object, uint desired, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __global atomic_uint *object, uint desired,
                         memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __global atomic_ulong *object, ulong desired);
ulong __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __global atomic_ulong *object, ulong desired, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __global atomic_ulong *object, ulong desired,
                         memory_order order, memory_scope scope);
float __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __global atomic_float *object, float desired);
float __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __global atomic_float *object, float desired, memory_order order);
float __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __global atomic_float *object, float desired,
                         memory_order order, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BUILTIN_ATTRIBUTES
atomic_exchange(volatile __global atomic_double *object, double desired);
double __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile __global atomic_double *object,
                         double desired, memory_order order);
double __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile __global atomic_double *object, double desired, memory_order order,
    memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_BUILTIN_ATTRIBUTES atomic_exchange(volatile atomic_int *object,
                                            int desired);
int __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile atomic_int *object, int desired, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile atomic_int *object, int desired,
                         memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_exchange(volatile atomic_long *object,
                                             long desired);
long __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile atomic_long *object, long desired, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile atomic_long *object, long desired,
                         memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_exchange(volatile atomic_uint *object,
                                             uint desired);
uint __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile atomic_uint *object, uint desired, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile atomic_uint *object, uint desired,
                         memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES atomic_exchange(volatile atomic_ulong *object,
                                              ulong desired);
ulong __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile atomic_ulong *object, ulong desired, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile atomic_ulong *object, ulong desired,
                         memory_order order, memory_scope scope);
float __CL_BUILTIN_ATTRIBUTES atomic_exchange(volatile atomic_float *object,
                                              float desired);
float __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile atomic_float *object, float desired, memory_order order);
float __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile atomic_float *object, float desired,
                         memory_order order, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BUILTIN_ATTRIBUTES atomic_exchange(volatile atomic_double *object,
                                               double desired);
double __CL_BUILTIN_ATTRIBUTES atomic_exchange_explicit(
    volatile atomic_double *object, double desired, memory_order order);
double __CL_BUILTIN_ATTRIBUTES
atomic_exchange_explicit(volatile atomic_double *object, double desired,
                         memory_order order, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_int *object, __local int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_int *object, __global int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_int *object, __private int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_int *object, int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_long *object, __local long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_long *object,
                               __global long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_long *object, __global long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_long *object, __global long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_long *object,
                               __private long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_long *object, __private long *expected,
    long desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_long *object, __private long *expected,
    long desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_long *object, long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_uint *object, __local uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_uint *object,
                               __global uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_uint *object, __global uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_uint *object, __global uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_uint *object,
                               __private uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_uint *object, __private uint *expected,
    uint desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_uint *object, __private uint *expected,
    uint desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_uint *object, uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_ulong *object,
                               __local ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_ulong *object, __local ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_ulong *object, __local ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_ulong *object,
                               __global ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_ulong *object, __global ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_ulong *object, __global ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_ulong *object,
                               __private ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_ulong *object, __private ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_ulong *object, __private ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_ulong *object, ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_float *object,
                               __local float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_float *object, __local float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_float *object, __local float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_float *object,
                               __global float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_float *object, __global float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_float *object, __global float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_float *object,
                               __private float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_float *object, __private float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_float *object, __private float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_float *object, float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_double *object,
                               __local double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_double *object, __local double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_double *object, __local double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_double *object,
                               __global double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_double *object, __global double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_double *object, __global double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __local atomic_double *object,
                               __private double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_double *object, __private double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_double *object, __private double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __local atomic_double *object, double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __local atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __global atomic_int *object, __local int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __global atomic_int *object, __global int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __global atomic_int *object, __private int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __global atomic_int *object, int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_long *object,
                               __local long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_long *object,
                               __global long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_long *object, __global long *expected,
    long desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_long *object, __global long *expected,
    long desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_long *object,
                               __private long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_long *object, __private long *expected,
    long desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_long *object, __private long *expected,
    long desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __global atomic_long *object, long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_uint *object,
                               __local uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_uint *object,
                               __global uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_uint *object, __global uint *expected,
    uint desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_uint *object, __global uint *expected,
    uint desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_uint *object,
                               __private uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_uint *object, __private uint *expected,
    uint desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_uint *object, __private uint *expected,
    uint desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __global atomic_uint *object, uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_ulong *object,
                               __local ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_ulong *object, __local ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_ulong *object, __local ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_ulong *object,
                               __global ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_ulong *object, __global ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_ulong *object, __global ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_ulong *object,
                               __private ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_ulong *object, __private ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_ulong *object, __private ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __global atomic_ulong *object, ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_float *object,
                               __local float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_float *object, __local float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_float *object, __local float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_float *object,
                               __global float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_float *object, __global float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_float *object, __global float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_float *object,
                               __private float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_float *object, __private float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_float *object, __private float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __global atomic_float *object, float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_double *object,
                               __local double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_double *object, __local double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_double *object, __local double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_double *object,
                               __global double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_double *object, __global double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_double *object, __global double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_strong(volatile __global atomic_double *object,
                               __private double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_double *object, __private double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_double *object, __private double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile __global atomic_double *object, double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile __global atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_int *object, __local int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_int *object, __global int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_int *object, __private int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_int *object, int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_long *object, __local long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_long *object, __global long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_long *object, __global long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_long *object, __global long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_long *object, __private long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_long *object, __private long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_long *object, __private long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_long *object, long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_uint *object, __local uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_uint *object, __global uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_uint *object, __global uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_uint *object, __global uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_uint *object, __private uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_uint *object, __private uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_uint *object, __private uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_uint *object, uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_ulong *object, __local ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_ulong *object, __local ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_ulong *object, __local ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_ulong *object, __global ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_ulong *object, __global ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_ulong *object, __global ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_ulong *object, __private ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_ulong *object, __private ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_ulong *object, __private ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_ulong *object, ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_float *object, __local float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_float *object, __local float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_float *object, __local float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_float *object, __global float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_float *object, __global float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_float *object, __global float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_float *object, __private float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_float *object, __private float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_float *object, __private float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_float *object, float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_double *object, __local double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_double *object, __local double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_double *object, __local double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_double *object, __global double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_double *object, __global double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_double *object, __global double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_double *object, __private double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_double *object, __private double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_double *object, __private double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong(
    volatile atomic_double *object, double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_strong_explicit(
    volatile atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_int *object, __local int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_int *object, __global int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_int *object, __private int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_int *object, int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_long *object, __local long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_long *object,
                             __global long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_long *object, __global long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_long *object, __global long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_long *object,
                             __private long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_long *object, __private long *expected,
    long desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_long *object, __private long *expected,
    long desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_long *object, long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_uint *object, __local uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_uint *object,
                             __global uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_uint *object, __global uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_uint *object, __global uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_uint *object,
                             __private uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_uint *object, __private uint *expected,
    uint desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_uint *object, __private uint *expected,
    uint desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_uint *object, uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_ulong *object,
                             __local ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_ulong *object, __local ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_ulong *object, __local ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_ulong *object,
                             __global ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_ulong *object, __global ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_ulong *object, __global ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_ulong *object,
                             __private ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_ulong *object, __private ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_ulong *object, __private ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_ulong *object, ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_float *object,
                             __local float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_float *object, __local float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_float *object, __local float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_float *object,
                             __global float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_float *object, __global float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_float *object, __global float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_float *object,
                             __private float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_float *object, __private float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_float *object, __private float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_float *object, float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_double *object,
                             __local double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_double *object, __local double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_double *object, __local double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_double *object,
                             __global double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_double *object, __global double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_double *object, __global double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __local atomic_double *object,
                             __private double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_double *object, __private double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_double *object, __private double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __local atomic_double *object, double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __local atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __global atomic_int *object, __local int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __global atomic_int *object, __global int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __global atomic_int *object, __private int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __global atomic_int *object, int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_long *object,
                             __local long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_long *object,
                             __global long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_long *object, __global long *expected,
    long desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_long *object, __global long *expected,
    long desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_long *object,
                             __private long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_long *object, __private long *expected,
    long desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_long *object, __private long *expected,
    long desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __global atomic_long *object, long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_uint *object,
                             __local uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_uint *object,
                             __global uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_uint *object, __global uint *expected,
    uint desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_uint *object, __global uint *expected,
    uint desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_uint *object,
                             __private uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_uint *object, __private uint *expected,
    uint desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_uint *object, __private uint *expected,
    uint desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __global atomic_uint *object, uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_ulong *object,
                             __local ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_ulong *object, __local ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_ulong *object, __local ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_ulong *object,
                             __global ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_ulong *object, __global ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_ulong *object, __global ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_ulong *object,
                             __private ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_ulong *object, __private ulong *expected,
    ulong desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_ulong *object, __private ulong *expected,
    ulong desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __global atomic_ulong *object, ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_float *object,
                             __local float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_float *object, __local float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_float *object, __local float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_float *object,
                             __global float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_float *object, __global float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_float *object, __global float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_float *object,
                             __private float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_float *object, __private float *expected,
    float desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_float *object, __private float *expected,
    float desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __global atomic_float *object, float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_double *object,
                             __local double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_double *object, __local double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_double *object, __local double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_double *object,
                             __global double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_double *object, __global double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_double *object, __global double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_compare_exchange_weak(volatile __global atomic_double *object,
                             __private double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_double *object, __private double *expected,
    double desired, memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_double *object, __private double *expected,
    double desired, memory_order success, memory_order failure,
    memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile __global atomic_double *object, double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile __global atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_int *object, __local int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_int *object, __local int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_int *object, __global int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_int *object, __global int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_int *object, __private int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_int *object, __private int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_int *object, int *expected, int desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_int *object, int *expected, int desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_long *object, __local long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_long *object, __local long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_long *object, __global long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_long *object, __global long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_long *object, __global long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_long *object, __private long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_long *object, __private long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_long *object, __private long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_long *object, long *expected, long desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_long *object, long *expected, long desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_uint *object, __local uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_uint *object, __local uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_uint *object, __global uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_uint *object, __global uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_uint *object, __global uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_uint *object, __private uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_uint *object, __private uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_uint *object, __private uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_uint *object, uint *expected, uint desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_uint *object, uint *expected, uint desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_ulong *object, __local ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_ulong *object, __local ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_ulong *object, __local ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_ulong *object, __global ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_ulong *object, __global ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_ulong *object, __global ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_ulong *object, __private ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_ulong *object, __private ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_ulong *object, __private ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_ulong *object, ulong *expected, ulong desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_ulong *object, ulong *expected, ulong desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_float *object, __local float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_float *object, __local float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_float *object, __local float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_float *object, __global float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_float *object, __global float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_float *object, __global float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_float *object, __private float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_float *object, __private float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_float *object, __private float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_float *object, float *expected, float desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_float *object, float *expected, float desired,
    memory_order success, memory_order failure, memory_scope scope);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_double *object, __local double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_double *object, __local double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_double *object, __local double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_double *object, __global double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_double *object, __global double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_double *object, __global double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_double *object, __private double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_double *object, __private double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_double *object, __private double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak(
    volatile atomic_double *object, double *expected, double desired);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure);
bool __CL_BUILTIN_ATTRIBUTES atomic_compare_exchange_weak_explicit(
    volatile atomic_double *object, double *expected, double desired,
    memory_order success, memory_order failure, memory_scope scope);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add(volatile __local atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile __local atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile __local atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add(volatile __global atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile __global atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile __global atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_add(volatile atomic_int *object,
                                             int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub(volatile __local atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile __local atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile __local atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub(volatile __global atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile __global atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile __global atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub(volatile atomic_int *object,
                                             int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_or(volatile __local atomic_int *object,
                                            int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile __local atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile __local atomic_int *object, int operand,
                         memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or(volatile __global atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile __global atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile __global atomic_int *object, int operand,
                         memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_or(volatile atomic_int *object,
                                            int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile atomic_int *object, int operand,
                         memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor(volatile __local atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile __local atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile __local atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor(volatile __global atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile __global atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile __global atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor(volatile atomic_int *object,
                                             int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and(volatile __local atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile __local atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile __local atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and(volatile __global atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile __global atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile __global atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_and(volatile atomic_int *object,
                                             int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min(volatile __local atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile __local atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile __local atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min(volatile __global atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile __global atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile __global atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_min(volatile atomic_int *object,
                                             int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max(volatile __local atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile __local atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile __local atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max(volatile __global atomic_int *object, int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile __global atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile __global atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_max(volatile atomic_int *object,
                                             int operand);
int __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile atomic_int *object, int operand, memory_order order);
int __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile atomic_int *object, int operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add(volatile __local atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile __local atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile __local atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add(volatile __global atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile __global atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile __global atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_add(volatile atomic_long *object,
                                              long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub(volatile __local atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile __local atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile __local atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub(volatile __global atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile __global atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile __global atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub(volatile atomic_long *object,
                                              long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or(volatile __local atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile __local atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile __local atomic_long *object, long operand,
                         memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or(volatile __global atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile __global atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile __global atomic_long *object, long operand,
                         memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_or(volatile atomic_long *object,
                                             long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile atomic_long *object, long operand,
                         memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor(volatile __local atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile __local atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile __local atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor(volatile __global atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile __global atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile __global atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor(volatile atomic_long *object,
                                              long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and(volatile __local atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile __local atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile __local atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and(volatile __global atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile __global atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile __global atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_and(volatile atomic_long *object,
                                              long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min(volatile __local atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile __local atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile __local atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min(volatile __global atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile __global atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile __global atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_min(volatile atomic_long *object,
                                              long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max(volatile __local atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile __local atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile __local atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max(volatile __global atomic_long *object, long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile __global atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile __global atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_max(volatile atomic_long *object,
                                              long operand);
long __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile atomic_long *object, long operand, memory_order order);
long __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile atomic_long *object, long operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add(volatile __local atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile __local atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile __local atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add(volatile __global atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile __global atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile __global atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_add(volatile atomic_uint *object,
                                              uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub(volatile __local atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile __local atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile __local atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub(volatile __global atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile __global atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile __global atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub(volatile atomic_uint *object,
                                              uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or(volatile __local atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile __local atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile __local atomic_uint *object, uint operand,
                         memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or(volatile __global atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile __global atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile __global atomic_uint *object, uint operand,
                         memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_or(volatile atomic_uint *object,
                                             uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile atomic_uint *object, uint operand,
                         memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor(volatile __local atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile __local atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile __local atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor(volatile __global atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile __global atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile __global atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor(volatile atomic_uint *object,
                                              uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and(volatile __local atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile __local atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile __local atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and(volatile __global atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile __global atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile __global atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_and(volatile atomic_uint *object,
                                              uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min(volatile __local atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile __local atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile __local atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min(volatile __global atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile __global atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile __global atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_min(volatile atomic_uint *object,
                                              uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max(volatile __local atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile __local atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile __local atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max(volatile __global atomic_uint *object, uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile __global atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile __global atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_max(volatile atomic_uint *object,
                                              uint operand);
uint __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile atomic_uint *object, uint operand, memory_order order);
uint __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile atomic_uint *object, uint operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add(volatile __local atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile __local atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile __local atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add(volatile __global atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile __global atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile __global atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_add(volatile atomic_ulong *object,
                                               ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_add_explicit(
    volatile atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_add_explicit(volatile atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub(volatile __local atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile __local atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile __local atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub(volatile __global atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile __global atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile __global atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub(volatile atomic_ulong *object,
                                               ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_sub_explicit(
    volatile atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_sub_explicit(volatile atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or(volatile __local atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile __local atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile __local atomic_ulong *object, ulong operand,
                         memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or(volatile __global atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile __global atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile __global atomic_ulong *object, ulong operand,
                         memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_or(volatile atomic_ulong *object,
                                              ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_or_explicit(
    volatile atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_or_explicit(volatile atomic_ulong *object, ulong operand,
                         memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor(volatile __local atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile __local atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile __local atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor(volatile __global atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile __global atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile __global atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor(volatile atomic_ulong *object,
                                               ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_xor_explicit(
    volatile atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_xor_explicit(volatile atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and(volatile __local atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile __local atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile __local atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and(volatile __global atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile __global atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile __global atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_and(volatile atomic_ulong *object,
                                               ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_and_explicit(
    volatile atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_and_explicit(volatile atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min(volatile __local atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile __local atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile __local atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min(volatile __global atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile __global atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile __global atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_min(volatile atomic_ulong *object,
                                               ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_min_explicit(
    volatile atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_min_explicit(volatile atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max(volatile __local atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile __local atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile __local atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max(volatile __global atomic_ulong *object, ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile __global atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile __global atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_max(volatile atomic_ulong *object,
                                               ulong operand);
ulong __CL_BUILTIN_ATTRIBUTES atomic_fetch_max_explicit(
    volatile atomic_ulong *object, ulong operand, memory_order order);
ulong __CL_BUILTIN_ATTRIBUTES
atomic_fetch_max_explicit(volatile atomic_ulong *object, ulong operand,
                          memory_order order, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_test_and_set(volatile __local atomic_flag *object);
bool __CL_BUILTIN_ATTRIBUTES atomic_flag_test_and_set_explicit(
    volatile __local atomic_flag *object, memory_order order);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_test_and_set_explicit(volatile __local atomic_flag *object,
                                  memory_order order, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_test_and_set(volatile __global atomic_flag *object);
bool __CL_BUILTIN_ATTRIBUTES atomic_flag_test_and_set_explicit(
    volatile __global atomic_flag *object, memory_order order);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_test_and_set_explicit(volatile __global atomic_flag *object,
                                  memory_order order, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_test_and_set(volatile atomic_flag *object);
bool __CL_BUILTIN_ATTRIBUTES atomic_flag_test_and_set_explicit(
    volatile atomic_flag *object, memory_order order);
bool __CL_BUILTIN_ATTRIBUTES atomic_flag_test_and_set_explicit(
    volatile atomic_flag *object, memory_order order, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_clear(volatile __local atomic_flag *object);
bool __CL_BUILTIN_ATTRIBUTES atomic_flag_clear_explicit(
    volatile __local atomic_flag *object, memory_order order);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_clear_explicit(volatile __local atomic_flag *object,
                           memory_order order, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_clear(volatile __global atomic_flag *object);
bool __CL_BUILTIN_ATTRIBUTES atomic_flag_clear_explicit(
    volatile __global atomic_flag *object, memory_order order);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_clear_explicit(volatile __global atomic_flag *object,
                           memory_order order, memory_scope scope);
bool __CL_BUILTIN_ATTRIBUTES atomic_flag_clear(volatile atomic_flag *object);
bool __CL_BUILTIN_ATTRIBUTES
atomic_flag_clear_explicit(volatile atomic_flag *object, memory_order order);
bool __CL_BUILTIN_ATTRIBUTES atomic_flag_clear_explicit(
    volatile atomic_flag *object, memory_order order, memory_scope scope);
#endif

uint __CL_WORK_ITEM_ATTRIBUTES get_sub_group_size(void);
uint __CL_WORK_ITEM_ATTRIBUTES get_max_sub_group_size(void);
uint __CL_WORK_ITEM_ATTRIBUTES get_num_sub_groups(void);
uint __CL_WORK_ITEM_ATTRIBUTES get_enqueued_num_sub_groups(void);
uint __CL_WORK_ITEM_ATTRIBUTES get_sub_group_id(void);
uint __CL_WORK_ITEM_ATTRIBUTES get_sub_group_local_id(void);

int __CL_BARRIER_ATTRIBUTES sub_group_all(int predicate);
int __CL_BARRIER_ATTRIBUTES sub_group_any(int predicate);

int __CL_BARRIER_ATTRIBUTES sub_group_broadcast(int x, uint sub_group_local_id);
int __CL_BARRIER_ATTRIBUTES sub_group_reduce_add(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_reduce_min(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_reduce_max(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_add(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_min(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_max(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_add(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_min(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_max(int x);

// SPV_KHR_uniform_group_arithmetic

int __CL_BARRIER_ATTRIBUTES sub_group_reduce_mul(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_reduce_and(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_reduce_or(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_reduce_xor(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_mul(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_and(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_or(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_xor(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_mul(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_and(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_or(int x);
int __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_xor(int x);

uint __CL_BARRIER_ATTRIBUTES sub_group_broadcast(uint x,
                                                 uint sub_group_local_id);
uint __CL_BARRIER_ATTRIBUTES sub_group_reduce_add(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_reduce_min(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_reduce_max(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_add(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_min(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_max(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_add(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_min(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_max(uint x);

// SPV_KHR_uniform_group_arithmetic

uint __CL_BARRIER_ATTRIBUTES sub_group_reduce_mul(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_reduce_and(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_reduce_or(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_reduce_xor(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_mul(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_and(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_or(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_xor(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_mul(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_and(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_or(uint x);
uint __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_xor(uint x);

long __CL_BARRIER_ATTRIBUTES sub_group_broadcast(long x,
                                                 uint sub_group_local_id);
long __CL_BARRIER_ATTRIBUTES sub_group_reduce_add(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_reduce_min(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_reduce_max(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_add(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_min(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_max(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_add(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_min(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_max(long x);

// SPV_KHR_uniform_group_arithmetic

long __CL_BARRIER_ATTRIBUTES sub_group_reduce_mul(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_reduce_and(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_reduce_or(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_reduce_xor(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_mul(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_and(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_or(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_xor(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_mul(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_and(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_or(long x);
long __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_xor(long x);

ulong __CL_BARRIER_ATTRIBUTES sub_group_broadcast(ulong x,
                                                  uint sub_group_local_id);
ulong __CL_BARRIER_ATTRIBUTES sub_group_reduce_add(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_reduce_min(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_reduce_max(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_add(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_min(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_max(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_add(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_min(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_max(ulong x);

// SPV_KHR_uniform_group_arithmetic

ulong __CL_BARRIER_ATTRIBUTES sub_group_reduce_mul(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_reduce_and(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_reduce_or(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_reduce_xor(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_mul(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_and(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_or(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_xor(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_mul(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_and(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_or(ulong x);
ulong __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_xor(ulong x);

#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_BARRIER_ATTRIBUTES sub_group_broadcast(half x,
                                                 uint sub_group_local_id);
half __CL_BARRIER_ATTRIBUTES sub_group_reduce_add(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_reduce_min(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_reduce_max(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_add(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_min(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_max(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_add(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_min(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_max(half x);

// SPV_KHR_uniform_group_arithmetic

half __CL_BARRIER_ATTRIBUTES sub_group_reduce_mul(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_mul(half x);
half __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_mul(half x);
#endif  // __CA_BUILTINS_HALF_SUPPORT

float __CL_BARRIER_ATTRIBUTES sub_group_broadcast(float x,
                                                  uint sub_group_local_id);
float __CL_BARRIER_ATTRIBUTES sub_group_reduce_add(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_reduce_min(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_reduce_max(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_add(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_min(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_max(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_add(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_min(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_max(float x);

// SPV_KHR_uniform_group_arithmetic

float __CL_BARRIER_ATTRIBUTES sub_group_reduce_mul(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_mul(float x);
float __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_mul(float x);

#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BARRIER_ATTRIBUTES sub_group_broadcast(double x,
                                                   uint sub_group_local_id);
double __CL_BARRIER_ATTRIBUTES sub_group_reduce_add(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_reduce_min(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_reduce_max(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_add(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_min(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_max(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_add(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_min(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_max(double x);

// SPV_KHR_uniform_group_arithmetic

double __CL_BARRIER_ATTRIBUTES sub_group_reduce_mul(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_mul(double x);
double __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_mul(double x);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

// SPV_KHR_uniform_group_arithmetic

bool __CL_BARRIER_ATTRIBUTES sub_group_reduce_and(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_reduce_or(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_reduce_xor(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_reduce_logical_and(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_reduce_logical_or(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_reduce_logical_xor(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_and(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_or(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_xor(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_logical_and(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_logical_or(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_exclusive_logical_xor(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_and(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_or(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_xor(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_logical_and(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_logical_or(bool x);
bool __CL_BARRIER_ATTRIBUTES sub_group_scan_inclusive_logical_xor(bool x);

void __CL_BARRIER_ATTRIBUTES sub_group_barrier(cl_mem_fence_flags flags);
void __CL_BARRIER_ATTRIBUTES sub_group_barrier(cl_mem_fence_flags flags,
                                               memory_scope scope);

int __CL_BARRIER_ATTRIBUTES work_group_all(int x);
int __CL_BARRIER_ATTRIBUTES work_group_any(int x);

#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_BARRIER_ATTRIBUTES work_group_broadcast(half a, size_t x);
half __CL_BARRIER_ATTRIBUTES work_group_broadcast(half a, size_t x, size_t y);
half __CL_BARRIER_ATTRIBUTES work_group_broadcast(half a, size_t x, size_t y,
                                                  size_t z);
half __CL_BARRIER_ATTRIBUTES work_group_reduce_add(half x);
half __CL_BARRIER_ATTRIBUTES work_group_reduce_min(half x);
half __CL_BARRIER_ATTRIBUTES work_group_reduce_max(half x);
half __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_add(half x);
half __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_min(half x);
half __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_max(half x);
half __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_add(half x);
half __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_min(half x);
half __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_max(half x);
#endif  // __CA_BUILTINS_HALF_SUPPORT

int __CL_BARRIER_ATTRIBUTES work_group_broadcast(int a, size_t x);
int __CL_BARRIER_ATTRIBUTES work_group_broadcast(int a, size_t x, size_t y);
int __CL_BARRIER_ATTRIBUTES work_group_broadcast(int a, size_t x, size_t y,
                                                 size_t z);
int __CL_BARRIER_ATTRIBUTES work_group_reduce_add(int x);
int __CL_BARRIER_ATTRIBUTES work_group_reduce_min(int x);
int __CL_BARRIER_ATTRIBUTES work_group_reduce_max(int x);
int __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_add(int x);
int __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_min(int x);
int __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_max(int x);
int __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_add(int x);
int __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_min(int x);
int __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_max(int x);

uint __CL_BARRIER_ATTRIBUTES work_group_broadcast(uint a, size_t x);
uint __CL_BARRIER_ATTRIBUTES work_group_broadcast(uint a, size_t x, size_t y);
uint __CL_BARRIER_ATTRIBUTES work_group_broadcast(uint a, size_t x, size_t y,
                                                  size_t z);
uint __CL_BARRIER_ATTRIBUTES work_group_reduce_add(uint x);
uint __CL_BARRIER_ATTRIBUTES work_group_reduce_min(uint x);
uint __CL_BARRIER_ATTRIBUTES work_group_reduce_max(uint x);
uint __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_add(uint x);
uint __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_min(uint x);
uint __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_max(uint x);
uint __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_add(uint x);
uint __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_min(uint x);
uint __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_max(uint x);

long __CL_BARRIER_ATTRIBUTES work_group_broadcast(long a, size_t x);
long __CL_BARRIER_ATTRIBUTES work_group_broadcast(long a, size_t x, size_t y);
long __CL_BARRIER_ATTRIBUTES work_group_broadcast(long a, size_t x, size_t y,
                                                  size_t z);
long __CL_BARRIER_ATTRIBUTES work_group_reduce_add(long x);
long __CL_BARRIER_ATTRIBUTES work_group_reduce_min(long x);
long __CL_BARRIER_ATTRIBUTES work_group_reduce_max(long x);
long __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_add(long x);
long __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_min(long x);
long __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_max(long x);
long __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_add(long x);
long __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_min(long x);
long __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_max(long x);

ulong __CL_BARRIER_ATTRIBUTES work_group_broadcast(ulong a, size_t x);
ulong __CL_BARRIER_ATTRIBUTES work_group_broadcast(ulong a, size_t x, size_t y);
ulong __CL_BARRIER_ATTRIBUTES work_group_broadcast(ulong a, size_t x, size_t y,
                                                   size_t z);
ulong __CL_BARRIER_ATTRIBUTES work_group_reduce_add(ulong x);
ulong __CL_BARRIER_ATTRIBUTES work_group_reduce_min(ulong x);
ulong __CL_BARRIER_ATTRIBUTES work_group_reduce_max(ulong x);
ulong __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_add(ulong x);
ulong __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_min(ulong x);
ulong __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_max(ulong x);
ulong __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_add(ulong x);
ulong __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_min(ulong x);
ulong __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_max(ulong x);

float __CL_BARRIER_ATTRIBUTES work_group_broadcast(float a, size_t x);
float __CL_BARRIER_ATTRIBUTES work_group_broadcast(float a, size_t x, size_t y);
float __CL_BARRIER_ATTRIBUTES work_group_broadcast(float a, size_t x, size_t y,
                                                   size_t z);
float __CL_BARRIER_ATTRIBUTES work_group_reduce_add(float x);
float __CL_BARRIER_ATTRIBUTES work_group_reduce_min(float x);
float __CL_BARRIER_ATTRIBUTES work_group_reduce_max(float x);
float __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_add(float x);
float __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_min(float x);
float __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_max(float x);
float __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_add(float x);
float __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_min(float x);
float __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_max(float x);

#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BARRIER_ATTRIBUTES work_group_broadcast(double a, size_t x);
double __CL_BARRIER_ATTRIBUTES work_group_broadcast(double a, size_t x,
                                                    size_t y);
double __CL_BARRIER_ATTRIBUTES work_group_broadcast(double a, size_t x,
                                                    size_t y, size_t z);
double __CL_BARRIER_ATTRIBUTES work_group_reduce_add(double x);
double __CL_BARRIER_ATTRIBUTES work_group_reduce_min(double x);
double __CL_BARRIER_ATTRIBUTES work_group_reduce_max(double x);
double __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_add(double x);
double __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_min(double x);
double __CL_BARRIER_ATTRIBUTES work_group_scan_exclusive_max(double x);
double __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_add(double x);
double __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_min(double x);
double __CL_BARRIER_ATTRIBUTES work_group_scan_inclusive_max(double x);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(bool *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const bool *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(char16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const char16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(short16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const short16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(int16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const int16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(long16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const long16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uchar16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uchar16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ushort16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ushort16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(uint16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const uint16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(ulong16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const ulong16 *ptr);
#ifdef __CA_BUILTINS_HALF_SUPPORT
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(half16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const half16 *ptr);
#endif  // __CA_BUILTINS_HALF_SUPPORT
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(float16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const float16 *ptr);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double2 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double3 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double4 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double8 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(double16 *ptr);
cl_mem_fence_flags __CL_BUILTIN_ATTRIBUTES get_fence(const double16 *ptr);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifndef __cplusplus
char2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const char *pointer);
char3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const char *pointer);
char4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const char *pointer);
char8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const char *pointer);
char16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const char *pointer);
short2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const short *pointer);
short3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const short *pointer);
short4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const short *pointer);
short8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const short *pointer);
short16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const short *pointer);
int2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const int *pointer);
int3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const int *pointer);
int4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const int *pointer);
int8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const int *pointer);
int16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const int *pointer);
long2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const long *pointer);
long3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const long *pointer);
long4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const long *pointer);
long8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const long *pointer);
long16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const long *pointer);
uchar2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const uchar *pointer);
uchar3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const uchar *pointer);
uchar4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const uchar *pointer);
uchar8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const uchar *pointer);
uchar16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const uchar *pointer);
ushort2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const ushort *pointer);
ushort3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const ushort *pointer);
ushort4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const ushort *pointer);
ushort8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const ushort *pointer);
ushort16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const ushort *pointer);
uint2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const uint *pointer);
uint3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const uint *pointer);
uint4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const uint *pointer);
uint8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const uint *pointer);
uint16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const uint *pointer);
ulong2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const ulong *pointer);
ulong3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const ulong *pointer);
ulong4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const ulong *pointer);
ulong8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const ulong *pointer);
ulong16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const ulong *pointer);
#ifdef __CA_BUILTINS_HALF_SUPPORT
half2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const half *pointer);
half3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const half *pointer);
half4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const half *pointer);
half8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const half *pointer);
half16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const half *pointer);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const float *pointer);
float3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const float *pointer);
float4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const float *pointer);
float8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const float *pointer);
float16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const float *pointer);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double2 __CL_BUILTIN_ATTRIBUTES vload2(size_t offset, const double *pointer);
double3 __CL_BUILTIN_ATTRIBUTES vload3(size_t offset, const double *pointer);
double4 __CL_BUILTIN_ATTRIBUTES vload4(size_t offset, const double *pointer);
double8 __CL_BUILTIN_ATTRIBUTES vload8(size_t offset, const double *pointer);
double16 __CL_BUILTIN_ATTRIBUTES vload16(size_t offset, const double *pointer);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  //__cplusplus
#ifndef __cplusplus
void __CL_BUILTIN_ATTRIBUTES vstore2(char2 payload, size_t offset,
                                     char *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(char3 payload, size_t offset,
                                     char *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(char4 payload, size_t offset,
                                     char *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(char8 payload, size_t offset,
                                     char *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(char16 payload, size_t offset,
                                      char *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore2(short2 payload, size_t offset,
                                     short *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(short3 payload, size_t offset,
                                     short *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(short4 payload, size_t offset,
                                     short *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(short8 payload, size_t offset,
                                     short *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(short16 payload, size_t offset,
                                      short *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore2(int2 payload, size_t offset, int *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(int3 payload, size_t offset, int *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(int4 payload, size_t offset, int *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(int8 payload, size_t offset, int *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(int16 payload, size_t offset,
                                      int *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore2(long2 payload, size_t offset,
                                     long *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(long3 payload, size_t offset,
                                     long *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(long4 payload, size_t offset,
                                     long *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(long8 payload, size_t offset,
                                     long *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(long16 payload, size_t offset,
                                      long *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore2(uchar2 payload, size_t offset,
                                     uchar *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(uchar3 payload, size_t offset,
                                     uchar *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(uchar4 payload, size_t offset,
                                     uchar *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(uchar8 payload, size_t offset,
                                     uchar *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(uchar16 payload, size_t offset,
                                      uchar *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore2(ushort2 payload, size_t offset,
                                     ushort *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(ushort3 payload, size_t offset,
                                     ushort *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(ushort4 payload, size_t offset,
                                     ushort *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(ushort8 payload, size_t offset,
                                     ushort *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(ushort16 payload, size_t offset,
                                      ushort *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore2(uint2 payload, size_t offset,
                                     uint *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(uint3 payload, size_t offset,
                                     uint *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(uint4 payload, size_t offset,
                                     uint *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(uint8 payload, size_t offset,
                                     uint *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(uint16 payload, size_t offset,
                                      uint *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore2(ulong2 payload, size_t offset,
                                     ulong *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(ulong3 payload, size_t offset,
                                     ulong *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(ulong4 payload, size_t offset,
                                     ulong *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(ulong8 payload, size_t offset,
                                     ulong *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(ulong16 payload, size_t offset,
                                      ulong *pointer);
#ifdef __CA_BUILTINS_HALF_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstore2(half2 payload, size_t offset,
                                     half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(half3 payload, size_t offset,
                                     half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(half4 payload, size_t offset,
                                     half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(half8 payload, size_t offset,
                                     half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(half16 payload, size_t offset,
                                      half *pointer);
#endif  // __CA_BUILTINS_HALF_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstore2(float2 payload, size_t offset,
                                     float *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(float3 payload, size_t offset,
                                     float *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(float4 payload, size_t offset,
                                     float *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(float8 payload, size_t offset,
                                     float *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(float16 payload, size_t offset,
                                      float *pointer);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstore2(double2 payload, size_t offset,
                                     double *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore3(double3 payload, size_t offset,
                                     double *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore4(double4 payload, size_t offset,
                                     double *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore8(double8 payload, size_t offset,
                                     double *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore16(double16 payload, size_t offset,
                                      double *pointer);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
#endif  //__cplusplus
float __CL_BUILTIN_ATTRIBUTES vload_half(size_t offset, const half *pointer);
float2 __CL_BUILTIN_ATTRIBUTES vload_half2(size_t offset, const half *pointer);
float3 __CL_BUILTIN_ATTRIBUTES vload_half3(size_t offset, const half *pointer);
float4 __CL_BUILTIN_ATTRIBUTES vload_half4(size_t offset, const half *pointer);
float8 __CL_BUILTIN_ATTRIBUTES vload_half8(size_t offset, const half *pointer);
float16 __CL_BUILTIN_ATTRIBUTES vload_half16(size_t offset,
                                             const half *pointer);
float __CL_BUILTIN_ATTRIBUTES vloada_half(size_t offset, const half *pointer);
float2 __CL_BUILTIN_ATTRIBUTES vloada_half2(size_t offset, const half *pointer);
float3 __CL_BUILTIN_ATTRIBUTES vloada_half3(size_t offset, const half *pointer);
float4 __CL_BUILTIN_ATTRIBUTES vloada_half4(size_t offset, const half *pointer);
float8 __CL_BUILTIN_ATTRIBUTES vloada_half8(size_t offset, const half *pointer);
float16 __CL_BUILTIN_ATTRIBUTES vloada_half16(size_t offset,
                                              const half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half(float data, size_t offset,
                                         half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(float data, size_t offset,
                                             half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(float data, size_t offset,
                                             half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(float data, size_t offset,
                                             half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(float data, size_t offset,
                                             half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2(float2 data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(float2 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(float2 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(float2 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(float2 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3(float3 data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(float3 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(float3 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(float3 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(float3 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4(float4 data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(float4 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(float4 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(float4 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(float4 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8(float8 data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(float8 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(float8 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(float8 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(float8 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16(float16 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(float16 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(float16 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(float16 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(float16 data, size_t offset,
                                               half *pointer);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstore_half(double data, size_t offset,
                                         half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rte(double data, size_t offset,
                                             half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtz(double data, size_t offset,
                                             half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtn(double data, size_t offset,
                                             half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half_rtp(double data, size_t offset,
                                             half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2(double2 data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rte(double2 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtz(double2 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtn(double2 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half2_rtp(double2 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3(double3 data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rte(double3 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtz(double3 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtn(double3 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half3_rtp(double3 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4(double4 data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rte(double4 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtz(double4 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtn(double4 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half4_rtp(double4 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8(double8 data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rte(double8 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtz(double8 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtn(double8 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half8_rtp(double8 data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16(double16 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rte(double16 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtz(double16 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtn(double16 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstore_half16_rtp(double16 data, size_t offset,
                                               half *pointer);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstorea_half(float data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(float data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(float data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(float data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(float data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2(float2 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(float2 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(float2 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(float2 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(float2 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3(float3 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(float3 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(float3 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(float3 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(float3 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4(float4 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(float4 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(float4 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(float4 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(float4 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8(float8 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(float8 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(float8 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(float8 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(float8 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16(float16 data, size_t offset,
                                            half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(float16 data, size_t offset,
                                                half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(float16 data, size_t offset,
                                                half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(float16 data, size_t offset,
                                                half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(float16 data, size_t offset,
                                                half *pointer);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
void __CL_BUILTIN_ATTRIBUTES vstorea_half(double data, size_t offset,
                                          half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rte(double data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtz(double data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtn(double data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half_rtp(double data, size_t offset,
                                              half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2(double2 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rte(double2 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtz(double2 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtn(double2 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half2_rtp(double2 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3(double3 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rte(double3 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtz(double3 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtn(double3 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half3_rtp(double3 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4(double4 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rte(double4 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtz(double4 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtn(double4 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half4_rtp(double4 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8(double8 data, size_t offset,
                                           half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rte(double8 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtz(double8 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtn(double8 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half8_rtp(double8 data, size_t offset,
                                               half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16(double16 data, size_t offset,
                                            half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rte(double16 data, size_t offset,
                                                half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtz(double16 data, size_t offset,
                                                half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtn(double16 data, size_t offset,
                                                half *pointer);
void __CL_BUILTIN_ATTRIBUTES vstorea_half16_rtp(double16 data, size_t offset,
                                                half *pointer);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT

/*-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-*/

#ifdef __CA_BUILTINS_HALF_SUPPORT
half __CL_BUILTIN_ATTRIBUTES fract(half x, half *y);
half __CL_BUILTIN_ATTRIBUTES modf(half x, half *y);
half __CL_BUILTIN_ATTRIBUTES sincos(half x, half *y);
half __CL_BUILTIN_ATTRIBUTES frexp(half x, int *y);
half __CL_BUILTIN_ATTRIBUTES lgamma_r(half x, int *y);
half __CL_BUILTIN_ATTRIBUTES remquo(half x, half y, int *z);
half2 __CL_BUILTIN_ATTRIBUTES fract(half2 x, half2 *y);
half2 __CL_BUILTIN_ATTRIBUTES modf(half2 x, half2 *y);
half2 __CL_BUILTIN_ATTRIBUTES sincos(half2 x, half2 *y);
half2 __CL_BUILTIN_ATTRIBUTES frexp(half2 x, int2 *y);
half2 __CL_BUILTIN_ATTRIBUTES lgamma_r(half2 x, int2 *y);
half2 __CL_BUILTIN_ATTRIBUTES remquo(half2 x, half2 y, int2 *z);
half3 __CL_BUILTIN_ATTRIBUTES fract(half3 x, half3 *y);
half3 __CL_BUILTIN_ATTRIBUTES modf(half3 x, half3 *y);
half3 __CL_BUILTIN_ATTRIBUTES sincos(half3 x, half3 *y);
half3 __CL_BUILTIN_ATTRIBUTES frexp(half3 x, int3 *y);
half3 __CL_BUILTIN_ATTRIBUTES lgamma_r(half3 x, int3 *y);
half3 __CL_BUILTIN_ATTRIBUTES remquo(half3 x, half3 y, int3 *z);
half4 __CL_BUILTIN_ATTRIBUTES fract(half4 x, half4 *y);
half4 __CL_BUILTIN_ATTRIBUTES modf(half4 x, half4 *y);
half4 __CL_BUILTIN_ATTRIBUTES sincos(half4 x, half4 *y);
half4 __CL_BUILTIN_ATTRIBUTES frexp(half4 x, int4 *y);
half4 __CL_BUILTIN_ATTRIBUTES lgamma_r(half4 x, int4 *y);
half4 __CL_BUILTIN_ATTRIBUTES remquo(half4 x, half4 y, int4 *z);
half8 __CL_BUILTIN_ATTRIBUTES fract(half8 x, half8 *y);
half8 __CL_BUILTIN_ATTRIBUTES modf(half8 x, half8 *y);
half8 __CL_BUILTIN_ATTRIBUTES sincos(half8 x, half8 *y);
half8 __CL_BUILTIN_ATTRIBUTES frexp(half8 x, int8 *y);
half8 __CL_BUILTIN_ATTRIBUTES lgamma_r(half8 x, int8 *y);
half8 __CL_BUILTIN_ATTRIBUTES remquo(half8 x, half8 y, int8 *z);
half16 __CL_BUILTIN_ATTRIBUTES fract(half16 x, half16 *y);
half16 __CL_BUILTIN_ATTRIBUTES modf(half16 x, half16 *y);
half16 __CL_BUILTIN_ATTRIBUTES sincos(half16 x, half16 *y);
half16 __CL_BUILTIN_ATTRIBUTES frexp(half16 x, int16 *y);
half16 __CL_BUILTIN_ATTRIBUTES lgamma_r(half16 x, int16 *y);
half16 __CL_BUILTIN_ATTRIBUTES remquo(half16 x, half16 y, int16 *z);
#endif  // __CA_BUILTINS_HALF_SUPPORT
float __CL_BUILTIN_ATTRIBUTES fract(float x, float *y);
float __CL_BUILTIN_ATTRIBUTES modf(float x, float *y);
float __CL_BUILTIN_ATTRIBUTES sincos(float x, float *y);
float __CL_BUILTIN_ATTRIBUTES frexp(float x, int *y);
float __CL_BUILTIN_ATTRIBUTES lgamma_r(float x, int *y);
float __CL_BUILTIN_ATTRIBUTES remquo(float x, float y, int *z);
float2 __CL_BUILTIN_ATTRIBUTES fract(float2 x, float2 *y);
float2 __CL_BUILTIN_ATTRIBUTES modf(float2 x, float2 *y);
float2 __CL_BUILTIN_ATTRIBUTES sincos(float2 x, float2 *y);
float2 __CL_BUILTIN_ATTRIBUTES frexp(float2 x, int2 *y);
float2 __CL_BUILTIN_ATTRIBUTES lgamma_r(float2 x, int2 *y);
float2 __CL_BUILTIN_ATTRIBUTES remquo(float2 x, float2 y, int2 *z);
float3 __CL_BUILTIN_ATTRIBUTES fract(float3 x, float3 *y);
float3 __CL_BUILTIN_ATTRIBUTES modf(float3 x, float3 *y);
float3 __CL_BUILTIN_ATTRIBUTES sincos(float3 x, float3 *y);
float3 __CL_BUILTIN_ATTRIBUTES frexp(float3 x, int3 *y);
float3 __CL_BUILTIN_ATTRIBUTES lgamma_r(float3 x, int3 *y);
float3 __CL_BUILTIN_ATTRIBUTES remquo(float3 x, float3 y, int3 *z);
float4 __CL_BUILTIN_ATTRIBUTES fract(float4 x, float4 *y);
float4 __CL_BUILTIN_ATTRIBUTES modf(float4 x, float4 *y);
float4 __CL_BUILTIN_ATTRIBUTES sincos(float4 x, float4 *y);
float4 __CL_BUILTIN_ATTRIBUTES frexp(float4 x, int4 *y);
float4 __CL_BUILTIN_ATTRIBUTES lgamma_r(float4 x, int4 *y);
float4 __CL_BUILTIN_ATTRIBUTES remquo(float4 x, float4 y, int4 *z);
float8 __CL_BUILTIN_ATTRIBUTES fract(float8 x, float8 *y);
float8 __CL_BUILTIN_ATTRIBUTES modf(float8 x, float8 *y);
float8 __CL_BUILTIN_ATTRIBUTES sincos(float8 x, float8 *y);
float8 __CL_BUILTIN_ATTRIBUTES frexp(float8 x, int8 *y);
float8 __CL_BUILTIN_ATTRIBUTES lgamma_r(float8 x, int8 *y);
float8 __CL_BUILTIN_ATTRIBUTES remquo(float8 x, float8 y, int8 *z);
float16 __CL_BUILTIN_ATTRIBUTES fract(float16 x, float16 *y);
float16 __CL_BUILTIN_ATTRIBUTES modf(float16 x, float16 *y);
float16 __CL_BUILTIN_ATTRIBUTES sincos(float16 x, float16 *y);
float16 __CL_BUILTIN_ATTRIBUTES frexp(float16 x, int16 *y);
float16 __CL_BUILTIN_ATTRIBUTES lgamma_r(float16 x, int16 *y);
float16 __CL_BUILTIN_ATTRIBUTES remquo(float16 x, float16 y, int16 *z);
#ifdef __CA_BUILTINS_DOUBLE_SUPPORT
double __CL_BUILTIN_ATTRIBUTES fract(double x, double *y);
double __CL_BUILTIN_ATTRIBUTES modf(double x, double *y);
double __CL_BUILTIN_ATTRIBUTES sincos(double x, double *y);
double __CL_BUILTIN_ATTRIBUTES frexp(double x, int *y);
double __CL_BUILTIN_ATTRIBUTES lgamma_r(double x, int *y);
double __CL_BUILTIN_ATTRIBUTES remquo(double x, double y, int *z);
double2 __CL_BUILTIN_ATTRIBUTES fract(double2 x, double2 *y);
double2 __CL_BUILTIN_ATTRIBUTES modf(double2 x, double2 *y);
double2 __CL_BUILTIN_ATTRIBUTES sincos(double2 x, double2 *y);
double2 __CL_BUILTIN_ATTRIBUTES frexp(double2 x, int2 *y);
double2 __CL_BUILTIN_ATTRIBUTES lgamma_r(double2 x, int2 *y);
double2 __CL_BUILTIN_ATTRIBUTES remquo(double2 x, double2 y, int2 *z);
double3 __CL_BUILTIN_ATTRIBUTES fract(double3 x, double3 *y);
double3 __CL_BUILTIN_ATTRIBUTES modf(double3 x, double3 *y);
double3 __CL_BUILTIN_ATTRIBUTES sincos(double3 x, double3 *y);
double3 __CL_BUILTIN_ATTRIBUTES frexp(double3 x, int3 *y);
double3 __CL_BUILTIN_ATTRIBUTES lgamma_r(double3 x, int3 *y);
double3 __CL_BUILTIN_ATTRIBUTES remquo(double3 x, double3 y, int3 *z);
double4 __CL_BUILTIN_ATTRIBUTES fract(double4 x, double4 *y);
double4 __CL_BUILTIN_ATTRIBUTES modf(double4 x, double4 *y);
double4 __CL_BUILTIN_ATTRIBUTES sincos(double4 x, double4 *y);
double4 __CL_BUILTIN_ATTRIBUTES frexp(double4 x, int4 *y);
double4 __CL_BUILTIN_ATTRIBUTES lgamma_r(double4 x, int4 *y);
double4 __CL_BUILTIN_ATTRIBUTES remquo(double4 x, double4 y, int4 *z);
double8 __CL_BUILTIN_ATTRIBUTES fract(double8 x, double8 *y);
double8 __CL_BUILTIN_ATTRIBUTES modf(double8 x, double8 *y);
double8 __CL_BUILTIN_ATTRIBUTES sincos(double8 x, double8 *y);
double8 __CL_BUILTIN_ATTRIBUTES frexp(double8 x, int8 *y);
double8 __CL_BUILTIN_ATTRIBUTES lgamma_r(double8 x, int8 *y);
double8 __CL_BUILTIN_ATTRIBUTES remquo(double8 x, double8 y, int8 *z);
double16 __CL_BUILTIN_ATTRIBUTES fract(double16 x, double16 *y);
double16 __CL_BUILTIN_ATTRIBUTES modf(double16 x, double16 *y);
double16 __CL_BUILTIN_ATTRIBUTES sincos(double16 x, double16 *y);
double16 __CL_BUILTIN_ATTRIBUTES frexp(double16 x, int16 *y);
double16 __CL_BUILTIN_ATTRIBUTES lgamma_r(double16 x, int16 *y);
double16 __CL_BUILTIN_ATTRIBUTES remquo(double16 x, double16 y, int16 *z);
#endif  // __CA_BUILTINS_DOUBLE_SUPPORT
