Getting Started
###############

Platform Dependencies
=====================

Each supported platform has a set of dependencies which are required in order to
build the oneAPI Construction Kit.

* `Ubuntu 20.04`_
* `Ubuntu 22.04`_
* `Ubuntu 24.04`_
* `Windows 10`_

Once the platform dependencies have been installed please read the
:doc:`/developer-guide` for more information about building and contributing to
the oneAPI Construction Kit.

Ubuntu 20.04
------------

On an x86-64 host system these are the minimum requirements to build
the oneAPI Construction Kit. These packages are required for any build
configuration.

* `GCC <https://gcc.gnu.org/>`_
* `Git`_
* `CMake`_ 3.16+
* `Python`_ 3.6.9+

.. code-block:: console

   $ sudo apt update
   $ sudo apt install -y build-essential git cmake libtinfo-dev python3

Recommended for Ubuntu 20.04
............................

* `Ninja`_ is a useful, fast, build tool. To use it pass ``-GNinja`` to
  `CMake`_ the first time it configures a build directory.
* `clang-format`_ 17 is a tool to format
  C/C++/Java/JavaScript/Objective-C/Protobuf code. All oneAPI Construction
  Kit source files are required to be formatted before being committed to
  the repository, including source files which are generated by the build.
* `lit`_ is a portable tool for executing LLVM and Clang style test suites.

.. code-block:: console

   $ sudo apt update
   $ sudo apt install -y ninja-build doxygen python3-pip
   $ sudo pip3 install lit virtualenv cmakelint clang-format==17.0.6

.. tip::
   For ease of use ``python3`` and ``pip3`` can be symlinked to ``python`` and
   ``pip`` with the following commands:

   .. code-block:: console

      $ sudo apt install python-is-python3
      $ sudo update-alternatives --install /usr/bin/pip pip `which pip3` 30

32-bit Compile
..............

Install the 32-bit C and C++ standard libraries, LLVM also depends on the 32-bit
terminal info library.

.. code-block:: console

   $ sudo apt install -y gcc-9-multilib g++-9-multilib libc6-dev:i386 lib32tinfo-dev

.. warning::
   The ``gcc-multilib`` and ``g++-multilib`` packages conflict with the Arm and
   AArch64 toolchain packages below. To install the 32 bit libraries at the same
   time use ``gcc-9-multilib``, ``g++-9-multilib``, and ``libc6-dev:i386`` that
   ``gcc-multilib`` and ``g++-multilib`` depend on but do not conflict with the
   Arm and AArch64 toolchain packages.

Arm 32-bit Cross Compile
........................

In addition to the `32-bit <32-bit Compile>`_ packages, install the Arm
toolchain.

.. code-block:: console

   $ sudo apt install -y gcc-9-arm-linux-gnueabihf g++-9-arm-linux-gnueabihf

Arm 64-bit (AArch64) Cross Compile
..................................

Install the AArch64 toolchain.

.. code-block:: console

   $ sudo apt install -y gcc-9-aarch64-linux-gnu g++-9-aarch64-linux-gnu

Ubuntu 22.04
------------

This is fully supported. This is recommended for the `RISC-V` host target. gcc
version 11 is recommended for this operating system.

Ubuntu 24.04
------------

This is supported, but has not been tested to the same level as 22.04. gcc
version 13 is recommended for this operating system. This will be required for
some qemu RISC-V features such as the half extension which was added in version
7.

Windows 10
----------

On an x86-64 Windows 10 host system these are the minimum requirements to build
the oneAPI Construction Kit. These tools are required for any build
configuration.

* `Visual Studio <https://www.visualstudio.com/>`_  2019 or 2022.
* `Git`_
* `CMake`_ 3.4.3+
* `Python`_ 3.6.9+
* `Vulkan SDK`_ 1.1.97+

Windows 10 does not provide an adequate package manager. However, the
third-party `Chocolatey <https://chocolatey.org/install#install-with-cmdexe>`_
package manager can be used to install the required packages.

.. code-block:: console

   $ choco install -y python
   $ choco install -y cmake --installargs 'ADD_CMAKE_TO_PATH=System'

There are a number of choices for installing Git on Windows, the recommended
approach is to install `Cmder`_ which bundles Git, various UNIX core utilities,
and an improved ``cmd.exe`` user experience.

.. code-block:: console

   $ choco install -y cmder

Alternatively, to install `Git for Windows <https://git-scm.com/download/win>`_
and forego using `Cmder`_ do the following.

.. code-block:: console

   $ choco install -y git

Recommended for Windows 10
..........................

* `Ninja`_ is a useful, fast, build tool, to use it pass ``-GNinja`` to `CMake`_
  the first time it configures a build directory.
* `clang-format`_ 16 is a tool to format
  C/C++/Java/JavaScript/Objective-C/Protobuf code, all oneAPI Construction Kit
  source files are required to be formatted before being committed to the
  repository, including source files which are generated by the build.
* `lit`_ is a portable tool for executing LLVM and Clang style test suites.

.. code-block:: console

   $ choco install -y ninja doxygen.install
   $ choco install -y llvm --version 18.1.5
   $ pip install lit virtualenv cmakelint

Windows 11
----------

Windows 11 is supported, but has not been tested to the same level as Windows 10.

Vulkan SDK
----------

For Vulkan support the Vulkan SDK is required to be installed. It can be
acquired from `LunarG <https://www.lunarg.com/vulkan-sdk/>`_. The latest version
should always be supported. The minimum supported version is 1.1.97.

The Vulkan SDK includes `SPIRV-Tools`_ as part of the package. Therefore
`SPIRV-Tools`_ does not need to be installed separately.

Package Manager Installation
............................

Users of Ubuntu 20.04 and later should configure their apt package manager to
install the Vulkan SDK packages directly as described by the `LunarG Vulkan SDK
packages`_ page. This installation method does neither set nor require the
:envvar:`VULKAN_SDK` environment variable, avoiding the configuration
complexities experienced when installing manually.

Windows users should install directly from `LunarG
<https://www.lunarg.com/vulkan-sdk/>`_, as at the time of writing the Vulkan SDK
cannot be installed through Chocolatey.

Manual Installation
...................

Other Linux users will need to take some extra steps after downloading the
tarball distribution. First run the ``build_tools.sh`` script; then source the
``setup-env.sh`` script whilst the Vulkan SDK directory as the current
directory. These steps are needed to access the ``spirv-as`` tool through the
:envvar:`VULKAN_SDK` environment variable in order to successfully compile
the oneAPI Construction Kit and generate all test suites correctly.

.. hint::
   Modifying ``.bashrc`` to source the ``setup-env.sh`` script avoids having to
   remember to do this on every new terminal session building the oneAPI
   Construction Kit.

The ``setup-env.sh`` script prepends :envvar:`VULKAN_SDK` to the system
:envvar:`PATH`, leading to prioritization of :envvar:`VULKAN_SDK` binaries
ahead of any other versions of the tools which may be installed in ``/usr/bin``.

SPIRV-Tools
-----------

When OpenCL support is required but Vulkan support is not, `SPIRV-Tools`_
**may** optionally be installed on the system :envvar:`PATH`. This is
recommended to achieve good coverage of SPIR-V compilation paths.

Follow the build instructions, or install the pre-built binaries in the
repository. It's harder to pin down versions of `SPIRV-Tools`_ since they don't
do releases, but we should support any commit from after January 2019.

Ubuntu 20.04 and later users can install ``spirv-tools`` from the package repository:

.. code-block:: console

   $ sudo apt install -y spirv-tools

.. warning::
   As the `LunarG Vulkan SDK packages`_ and the ``spirv-tools`` package both
   provide `SPIRV-Tools`_ builds, it is possible these packages may conflict
   causing issues during installation. Choose one or the other.

.. _Git: https://git-scm.com/
.. _CMake: https://cmake.org/
.. _Python: https://www.python.org/
.. _Ninja: https://ninja-build.org/
.. _clang-format: https://clang.llvm.org/docs/ClangFormat.html
.. _lit: https://llvm.org/docs/CommandGuide/lit.html
.. _Cmder: https://cmder.net/
.. _SPIRV-Tools: https://github.com/KhronosGroup/SPIRV-Tools
.. _LunarG Vulkan SDK packages: https://packages.lunarg.com/
.. _Vulkan SDK Chocolatey: https://community.chocolatey.org/packages/vulkan-sdk
