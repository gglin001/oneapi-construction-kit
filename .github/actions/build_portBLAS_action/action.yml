name: build-portBLAS
description: Action to clone and build portBLAS using oneAPI

inputs:
  workspace:
    description: 'Main workflow workspace'
    default: ${{ github.workspace }}

runs:
  # We don't want a new docker just a list of steps, so mark as composite
  using: "composite"
  steps:
    - name: Clone portBLAS
      shell: bash
      run: git clone --recursive https://github.com/codeplaysoftware/portBLAS

       # installs tools, ninja, installs llvm and sets up sccahe
    - name: setup ubuntu
      uses:  ./.github/actions/setup_ubuntu_build

    - name: Get Intel OneAPI BaseToolkit
      shell: bash
      run: |
        wget "https://github.com/intel/llvm/releases/download/nightly-2024-03-04/sycl_linux.tar.gz"
        mkdir linux_nightly_release
        tar -xzf sycl_linux.tar.gz -C linux_nightly_release

    - name: Set up Environment and Build portBLAS
      shell: bash
      run: |
        export LD_LIBRARY_PATH=$(pwd)/linux_nightly_release/lib:$LD_LIBRARY_PATH
        export CMAKE_CXX_COMPILER=$(pwd)/linux_nightly_release/bin/clang++
        export CMAKE_C_COMPILER=$(pwd)/linux_nightly_release/bin/clang
        export OCL_ICD_FILENAMES=${{ inputs.workspace }}/install/lib/libCL.so
        export CXX=$(pwd)/linux_nightly_release/bin/clang++

        # Note: With default options enabled, portBLAS supports complex math using
        # <ext/oneapi/experimental/sycl_complex.hpp>. It was removed in DPC++ in 0b5757bf.
        # To disable this -DBLAS_ENABLE_COMPLEX=OFF needs to added to cmake command line.
        cmake -B portBLAS_build_dir portBLAS -GNinja -DSYCL_COMPILER=dpcpp -DBLAS_ENABLE_COMPLEX=OFF
        ninja -C $(pwd)/portBLAS_build_dir

    - name: Package artifacts
      shell: bash
      run: |
        tar -cvzf portBLAS_build.tar.gz portBLAS_build_dir

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: portBLAS_build
        path: portBLAS_build.tar.gz